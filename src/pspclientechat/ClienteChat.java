/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pspclientechat;

import java.awt.Color;
import static java.awt.Color.*;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import static java.lang.Thread.sleep;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.text.AttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import static javax.swing.text.StyleConstants.*;
import javax.swing.text.StyleContext;
import usuario.Usuario;

/**
 * Clase ClienteChat.
 *
 * @author Angel Valera
 */
public class ClienteChat extends javax.swing.JFrame {

    public static String IP_SERVER;
    public static boolean Desconec = false;
    public static DataInputStream in = null;
    public static DataOutputStream out = null;
    public static Socket s = null;//para la comunicacion
    public static Usuario u = null;
    public static OutputStream fs = null;
    public static InputStream fe = null;

    /**
     * Contructor Cliente.
     */
    public ClienteChat() {
        //Ponemos el nick como título de la ventana
        super(" CONEXIÓN DEL CLIENTE CHAT: " + u.getNick());
        try {
            if (fs != null) {
                //Nos preparamos para enviar el objeto usuario
                ObjectOutputStream outObjeto = new ObjectOutputStream(fs);
                //Enviamos el objeto
                outObjeto.writeObject(u);
                initComponents();
                this.rootPane.setDefaultButton(this.Enviar);
            } else {
                JOptionPane.showMessageDialog(null, "Servidor no iniciado");
            }
        } catch (IOException ex) {
            Logger.getLogger(ClienteChat.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Mensaje = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        Desconectar = new javax.swing.JButton();
        Enviar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(540, 400));

        jScrollPane1.setViewportView(jTextPane1);

        Desconectar.setLabel("Desconectar");
        Desconectar.setMaximumSize(new java.awt.Dimension(122, 30));
        Desconectar.setMinimumSize(new java.awt.Dimension(122, 30));
        Desconectar.setSize(new java.awt.Dimension(100, 30));
        Desconectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DesconectarActionPerformed(evt);
            }
        });

        Enviar.setLabel("Enviar");
        Enviar.setMaximumSize(new java.awt.Dimension(82, 30));
        Enviar.setMinimumSize(new java.awt.Dimension(82, 30));
        Enviar.setSize(new java.awt.Dimension(100, 30));
        Enviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnviarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                    .addComponent(Mensaje))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Desconectar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Enviar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Mensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Enviar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Desconectar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Botón enviar.
     *
     * @param evt
     */
    private void EnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EnviarActionPerformed

        if (Desconec) {
            //Si la variable Desconec = true, vaciamos el texto de mensaje.
            Mensaje.setText("");
            //Mostramos un mensaje avisando de que se ha cerrado la conexión.
            JOptionPane.showMessageDialog(null, "Conexión finalizada. No pueden enviar más mensajes.");
        } else {
            //Almacenamos el texto en la variable m.
            String m = Mensaje.getText();
            if (!m.equals("")) {
                //Vaciamos el campo de texto.
                Mensaje.setText("");
                try {
                    //Enviamos el mensaje al server a través del DataOutputStream
                    out.writeUTF(m);

                    //Si lo enviado es un *, ponemos la variable Desconec a true
                    if (m.equals("*")) {
                        Desconec = true;
                    }
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(null, "Conexión finalizada. No pueden enviar más mensajes.");
                }
            }
        }
    }//GEN-LAST:event_EnviarActionPerformed

    /**
     * Botón Desconectar.
     *
     * @param evt
     */
    private void DesconectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DesconectarActionPerformed

        if (Desconec) {
            //Si la variable Desconec = true, mostramos un mensaje avisando de que la conexión ya ha sido finalizada
            JOptionPane.showMessageDialog(null, "La conexión ya ha sido finalizada.");
        } else {
            //Ponemos Desconec a True
            Desconec = true;
            String m = "*";
            try {
                //Enviamos la cadena de desconexión al server.
                out.writeUTF(m);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "La conexión ya ha sido finalizada.");
            }
        }
    }//GEN-LAST:event_DesconectarActionPerformed

    // Definir un método para que el cliente lea lo que el hilo le manda
    // (los mensajes del chat) para mostrarlo en el textarea. Esto se realiza
    // en un proceso repetitivo que termina cuando el usuario pulsa el botón
    // Desconectar
    public static void gestionaChat() throws IOException {
        String mSer = "";

        //El bucle estará activo mientras la Variable Desconec = false
        while (!Desconec) {
            try {
                if (in != null) {
                    //Lee el mensaje del servidor
                    mSer = in.readUTF();

                    //Si el mensaje es [info], nos preparamos para recibir el objeto.
                    if (mSer.equals("[info]")) {
                        fe = s.getInputStream();
                        ObjectInputStream inObjeto = new ObjectInputStream(fe);
                        Usuario us = new Usuario();
                        try {

                            us = (Usuario) inObjeto.readObject();
                        } catch (ClassNotFoundException ex) {
                            Logger.getLogger(ClienteChat.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        //Mostramos un cuadro de diálogo con la info de usuario
                        JOptionPane.showMessageDialog(null, "Nick: " + us.getNick() + "\nNombre: " + us.getNombre() + "\nE-Mail: " + us.getEmail());
                    } else {

                        //Si el mensaje recibido comienza con esta cadena, el mensaje lo hemos mandado nosotros, por lo que lo mostramos en color gris.
                        //a través de la función mostrarMsg().
                        if (mSer.startsWith("¥¬¥")) {
                            mostrarMsg(mSer.substring(3) + "\n", Color.LIGHT_GRAY, ALIGN_JUSTIFIED);
                        } else {
                            //El mensaje recibido es de otro usuario. Lo mostramos en negro.
                            mostrarMsg(mSer + "\n", BLACK, ALIGN_JUSTIFIED);
                        }
                    }
                 
                }
            } catch (IOException ex) {
                Logger.getLogger(ClienteChat.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
           mostrarMsg("Cerrando Ventana de Chat..." + "\n", Color.LIGHT_GRAY, ALIGN_JUSTIFIED);
                      
        //Cerramos la aplicación tras 3 segundos. Pongo estas líneas ya que no hemos implementado la opción de reconectar,
        // por lo que ya no tiene sentido mantener la ventana abierta.
        
//        try {
//            sleep(3000);
//        } catch (InterruptedException ex) {
//            Logger.getLogger(ClienteChat.class.getName()).log(Level.SEVERE, null, ex);
//        }
       // cerrar();
        //System.exit(1);
    }

    /**
     * Función encargada de ir añadiendo el mensaje recibido al TextPanel del
     * chat.
     *
     * @param msg Mensaje recibido
     * @param c Color
     * @param Justifi Justificación del texto. Parámetro no usado en esta
     * versión del chat.
     */
    public static void mostrarMsg(String msg, Color c, int Justifi) {
        //Definimos un nuevo estilo.
        StyleContext sc = StyleContext.getDefaultStyleContext();
        //Añadimos atributos al estilo para mostrar el texto.
        AttributeSet aset = sc.addAttribute(SimpleAttributeSet.EMPTY, StyleConstants.Foreground, c);
        aset = sc.addAttribute(aset, StyleConstants.FontFamily, "Lucida Console");
        aset = sc.addAttribute(aset, StyleConstants.Alignment, Justifi);

        //Medimos la longitud del texto y seleccionamos el último carácter, que siempre será un \n
        if (ClienteChat.jTextPane1.getDocument().getLength() >= 0) {
            int len = ClienteChat.jTextPane1.getDocument().getLength();
            ClienteChat.jTextPane1.setCaretPosition(len);
        } else {
            ClienteChat.jTextPane1.setCaretPosition(0);
        }

        //Asignamos atributos.
        ClienteChat.jTextPane1.setCharacterAttributes(aset, false);
        //Reemplazamos el \n seleccionado por el mensaje recibido. De esa forma, hacemos una especie de append al texto.
        ClienteChat.jTextPane1.replaceSelection(msg);
    }

    // En la función main() se pide el nick, el nombre y el email del usuario,
    // se realiza la conexión al servidor, se crea un objeto ClienteChat, se
    // muestra la pantalla y se ejecuta el método para gestionar el chat.
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClienteChat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        //Pedimos la ip del server. "localhost" por defecto.
        while ((IP_SERVER == null) || (IP_SERVER.equals(""))) {
            IP_SERVER = (JOptionPane.showInputDialog("Introduzca IP del servidor:", "localhost"));
        }
        //Creamos un nuevo usuario.
        u = new Usuario();
        //Solicitamos el nick
        while ((u.getNick() == null) || (u.getNick().equals(""))) {
            u.setNick(JOptionPane.showInputDialog("Introduzca Nick :"));
        }
        //Solicitamos el nombre
        while ((u.getNombre() == null) || (u.getNombre().equals(""))) {
            u.setNombre(JOptionPane.showInputDialog("Introduzca Nombre :"));
        }
        //Solicitamos el mail
        while ((u.getEmail() == null) || (u.getEmail().equals(""))) {
            u.setEmail(JOptionPane.showInputDialog("Introduzca E-mail :"));
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    //Llamamos al método que establece la conexión.
                    conexion();
                    new ClienteChat().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(ClienteChat.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        try {
            sleep(500);
        } catch (InterruptedException ex) {
            Logger.getLogger(ClienteChat.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            //Llamamos al método que gestiona el chat.
            gestionaChat();
        } catch (IOException ex) {
            Logger.getLogger(ClienteChat.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Método que crea la conexión con el servidor.
     *
     * @throws IOException
     */
    public static void conexion() throws IOException {
        try {
            //Creamos el socket.
            s = new Socket(IP_SERVER, 6000);
            //Creamos el InputStream
            in = new DataInputStream(s.getInputStream());
            //Creamos el OutputStream
            out = new DataOutputStream(s.getOutputStream());
            fs = s.getOutputStream();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Servidor no iniciado.");
        }
    }

    /**
     * Método para cerrar la conexión con el servidor
     *
     * @throws IOException
     */
    public static void cerrar() throws IOException {
        in.close();
        out.close();
        fs.close();
        System.exit(1);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Desconectar;
    private javax.swing.JButton Enviar;
    private javax.swing.JTextField Mensaje;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables
}
